'.source.ruby.rspec':
  'before (multi-line)':
    'prefix': 'bef'
    'body': 'before do\n  $1\nend'
  'before (one-line)':
    'prefix': 'b'
    'body': 'before { $1 }'
  'it (one-line)':
    'prefix': 'itt'
    'body': 'it { $1 }'
  'it (one-line)':
    'prefix': 'ite'
    'body': 'it { expect(${1:subject}$2).to${3:_not} ${4:${5:eq} ${6:object}}$0 }'
  'after (one-line)':
    'prefix': 'a'
    'body': 'after { $1 }$0'
  'let factory':
    'prefix': 'letf'
    'body': 'let(:${2:${1:model}}$3) { create(:${1:model}$4) }$0'
  'let factory build':
    'prefix': 'letfb'
    'body': 'let(:${2:${1:model}}$3) { build(:${1:model}$4) }$0'
  'let factory !':
    'prefix': 'letf!'
    'body': 'let!(:${2:${1:model}}$3) { create(:${1:model}$4) }$0'
  'factory create':
    'prefix': 'fgc'
    'body': 'create(:${1:model})$0'
  'factory build':
    'prefix': 'fgb'
    'body': 'build(:${1:model})$0'
  'subject':
    'prefix': 'sub'
    'body': 'subject { ${1:test_subject} }$0'
  'describe (String)':
    'prefix': 'des'
    'body': "describe \"${1:subject}\" do\n  $0\nend$0"
  'context':
    'prefix': 'con'
    'body': "context \"${1:context}\" do\n  $0\nend$0"
  'it (does something)':
    'prefix': 'it'
    'body': "it \"${1:does something}\"${2: do\n  $0\nend}$0"
  'expect':
    'prefix': 'exp'
    'body': 'expect(${1:subject}$2).${3:not_}to ${4:${5:eq}(${6:object})}$0'
  'expect with block':
    'prefix': 'expb'
    'body': '''
      expect do
        ${1:target}
      end.${2:not_}to ${3:change(${4:object}, :${5:method})}$0
    '''
  'expect with block to change':
    'prefix': 'expbc'
    'body': '''
      expect do
        ${1:target}
      end.to${2:_not} change(${3:object}, ${4:method})${5:.by(${6})}$0
    '''
  'expect response to redirect':
    'prefix': 'exprr'
    'body': 'expect(response).to redirect_to ${2:${1:root}_path}$0'
  'expect response to render template':
    'prefix': 'exprt'
    'body': 'expect(response).to render_template :${1:index}$0'
  'allow to receive':
    'prefix': 'atr'
    'body': '''
      allow(${1:object}).to receive(:${2:method})${4:.and_return(${3:value})}$0
    '''

'.source.ruby, .source.ruby.rspec':
  'to_yaml':
    'prefix': 'ty'
    'body': 'to_yaml'
  'to_json':
    'prefix': 'tj'
    'body': 'to_json'
  'to_s':
    'prefix': 'ts'
    'body': 'to_s'
  'to_i':
    'prefix': 'ti'
    'body': 'to_i'
  'to_datetime':
    'prefix': 'tdt'
    'body': 'to_datetime'
  'to_date':
    'prefix': 'td'
    'body': 'to_date'
  'to_time':
    'prefix': 'tt'
    'body': 'to_time'
  'byebug':
    'prefix': 'bb'
    'body': 'byebug'

'.source.ruby, .source.ruby.rails':
  'flash':
    'prefix': 'flash'
    'body': 'flash[:${1:notice}] = "${2:message}"'
  'flash notice':
    'prefix': 'fln'
    'body': 'flash[:notice] = "${2:message}"'
  'flash alert':
    'prefix': 'fla'
    'body': 'flash[:alert] = "${2:message}"'
  'flash success':
    'prefix': 'fls'
    'body': 'flash[:success] = "${2:message}"'
  'flash info':
    'prefix': 'fli'
    'body': 'flash[:info] = "${2:message}"'
  'flash warning':
    'prefix': 'flw'
    'body': 'flash[:warning] = "${2:message}"'
  'params':
    'prefix': 'par'
    'body': 'params[:${1:attr}]$0'
  'rubocop:disable':
    'prefix': 'rd'
    'body': '# rubocop:disable $0'
  'before_action':
    'prefix': 'ba'
    'body': 'before_action :${1:method}, ${2:only}: [:${3:index}$4]$0'
  'Rails logger':
    'prefix': 'log'
    'body': 'Rails.logger.${1:debug} $0'

'.text.html.ruby, .text.html.erb':
  "if block":
    prefix: "if"
    body: """
      <% if ${1:condition} %>
        ${2:true-block}
      <% end %>$0
    """
  "if/else block":
    prefix: "ife"
    body: """
      <% if ${1:condition} %>
        ${2:true-block}
      <% else %>
        ${3:false-block}
      <% end %>$0
    """
  "else tag":
    prefix: "else"
    body: "<% else %>$0"
  "elsif tag":
    prefix: "elsif"
    body: "<% elsif ${1:condition} %>$0"
  "unless block":
    prefix: "unless"
    body: """
      <% unless ${1:condition} %>
        ${2:false-block}
      <% end %>$0
    """
  "end tag":
    prefix: "end"
    body: "<% end %>$0"
  'erb tags':
    'prefix': '<'
    'body': '<%${1:=} $2 %>$0'
  'erb tags (invisible)':
    'prefix': '%'
    'body': '<% $1 %>$0'
  'erb tags (visible)':
    'prefix': '='
    'body': '<%= $1 %>$0'
  'debug':
    'prefix': 'debug'
    'body': '<%= debug $1 %>$0'
  'render':
    'prefix': 'render'
    'body': '<%= render ${2:\'${1:partial}\'} %>$0'
  'link_to':
    'prefix': 'lt'
    'body': "<%= link_to ${2:'${1:text}'}, ${3:path} %>$0"
  'link_to new':
    'prefix': 'ltn'
    'body': """
      <%= link_to ${2:'${1:New}'}, new_${3:widget}_path %>$0
    """
  'link_to edit':
    'prefix': 'lte'
    'body': """
      <%= link_to ${2:'${1:Edit}'}, edit_${3:widget}_path(${4:@}${3:widget}) %>$0
    """
  'link_to destroy':
    'prefix': 'ltd'
    'body': """
      <%= link_to ${2:'${1:Delete}'},
                  ${4:@${3:widget}},
                  method: :delete,
                  data: { confirm: '${5:Are you sure?}' } %>$0
    """
  'content_tag':
    'prefix': 'ct'
    'body': '<%= content_tag :${1:p} %>$0'
  'render':
    'prefix': 'ren'
    'body': "<%= render ${1:'${2:partial}'} %>$0"

'.text.html.php':
  'php visible tag':
    'prefix': '='
    'body': '<?= $1 ?>'
  'php hidden tag':
    'prefix': '?'
    'body': '<? $1 ?>'
  'site variable':
    'prefix': 'site'
    'body': "<?= $site->${1:content}('${2:variable}') ?>"
  'site content variable':
    'prefix': 'con'
    'body': "<?= $site->content('${1:variable}') ?>"
  'bind_attr variable':
    'prefix': 'bind'
    'body': "<?= $${1:page}->bind_attr('${2:variable}') ?>"
  'page variable':
    'prefix': 'page'
    'body': "<?= $page->${1:content}('${2:variable}') ?>"
  'page fragment variable':
    'prefix': 'frag'
    'body': "<?= $page->fragment('${1:variable}', $index) ?>"
  'helper method':
    'prefix': 'h'
    'body': "<?= $h->${1:function}(${2:$${3:variable}}$4) ?>"
  'render helper method':
    'prefix': 'ren'
    'body': "<?= $h->render('${1:partial}') ?>"

'.source.php':
  'function':
    'prefix': 'fun'
    'body': """
      function ${1:function_name}(${2:$${3:variable}}$4) {
        $5
      }$0
    """
  'site variable':
    'prefix': 'site'
    'body': "$site->${1:content}('${2:variable}')$0"
  'site content variable':
    'prefix': 'con'
    'body': "$site->content('${1:variable}')$0"
  'site bind_attr variable':
    'prefix': 'bind'
    'body': "$site->bind_attr('${1:variable}')$0"
  'page variable':
    'prefix': 'page'
    'body': "$page->content('${1:variable}')$0"
  'page fragment variable':
    'prefix': 'frag'
    'body': "$page->fragment('${1:variable}', $index)"
  'helper method':
    'prefix': 'h'
    'body': "$h->${1:function}(${2:$${3:variable}}$4)$0"
  'render method':
    'prefix': 'ren'
    'body': "$h->render('${1:partial}')$0"
  'echo':
    'prefix': 'echo'
    'body': 'echo ${1:"${2:string}"};$0'
  'arrow':
    'prefix': '-'
    'body': '->'
  'var_dump':
    'prefix': 'vd'
    'body': 'var_dump($${1:variable});'

'.source.scss':
  '@media #{$size}':
    prefix: 'med$'
    body: '@media #{$${1:size}} {\n  $2\n}$0'
  '@media #{$small-only}':
    prefix: 'medso'
    body: '@media #{$small-only} {\n  $1\n}$0'
  '@media #{$medium-only}':
    prefix: 'medmo'
    body: '@media #{$medium-only} {\n  $1\n}$0'
  '@media #{$large-only}':
    prefix: 'medlo'
    body: '@media #{$large-only} {\n  $1\n}$0'
  '@media #{$medium-up}':
    prefix: 'medmu'
    body: '@media #{$medium-up} {\n  $1\n}$0'
  '@media #{$large-up}':
    prefix: 'medlu'
    body: '@media #{$large-up} {\n  $1\n}$0'
  'headings':
    'prefix': 'hx'
    'body': """
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        $0
      }
    """
  'rem-calc':
    'prefix': 'rc'
    'body': 'rem-calc($1)'
  'Sass Linter Disable':
    'prefix': 'sld'
    'body': '// scss-lint:disable $0'

'.source.js':
  'variable (with assignment)':
    'prefix': 'var'
    'body': 'var ${1:name} = ${2:value};'
  'variable':
    'prefix': 'v'
    'body': 'var ${1:name};$0'
  'variable (with function)':
    'prefix': 'varf'
    'body': 'var ${1:name} = function (${2:argument}) {\n  $3\n};'
